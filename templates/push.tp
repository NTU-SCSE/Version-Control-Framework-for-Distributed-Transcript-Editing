def get_media_file():
    for file in os.listdir('.'):
        if (not os.path.isdir(file)) and (not file.startswith('.')) and (not file.endswith('.py')) and (not file.endswith('.eaf')) and (not file.endswith('.pfsx')) and (not file.lower().endswith('.textgrid')):
            return file


def analyze_progress_for_correction():
    transcript_file_path = from_working_dir(get_file_name_ends_with('.eaf'))

    if transcript_file_name is None:
        transcript_file_name = get_file_name_ends_with('.textgrid')

    marker_count = count_markers(transcript_file_path)
    segment_count = count_segments(transcript_file_path)
    progress = 1 - float(marker_count) / float(segment_count)
    return progress


def main():
    metadata_path = from_working_dir('metadata', 'metadata.json')
    content = read_file(metadata_path)
    metadata = json.loads(content)

    if metadata['type'] == 'correction':
        metadata['progress'] = analyze_progress_for_correction()
    elif metadata['type'] == 'creation':
        # todo: creation type
        metadata['progress'] = analyze_progress_for_correction()

    version = sys.version

    if version.startswith('3'):
        comment = input('Please enter your comment: ')
        declaration = input('Is this file finished? (y/N): ')
    elif version.startswith('2'):
        comment = raw_input('Please enter your comment: ')
        declaration = raw_input('Is this file finished? (y/N): ')

    metadata['comment'] = comment
    finished = False
    if declaration.lower() == 'y':
        finished = True
    metadata['finished'] = finished

    content = json.dumps(metadata)
    write_file(metadata_path, content)

    os.system('git status')
    os.system('git pull')
    os.system('git add .')
    os.system('git commit -m "editor"')
    os.system('git push')

    pause()
